// src/services/websocketService.js (전체 수정)
import { Client } from '@stomp/stompjs';
import SockJS from 'sockjs-client';

class WebSocketService {
  constructor() {
    this.client = null;
    this.connected = false;
    this.subscriptions = new Map();
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
  }

  connect(token) {
    // 💡 1. 인자를 토큰만 받도록 단순화했습니다.
    return new Promise((resolve, reject) => {
      if (!token) {
        reject(new Error('인증 토큰이 없습니다.'));
        return;
      }

      if (this.client && this.client.connected) {
        console.log('이미 WebSocket에 연결되어 있습니다.');
        resolve(this.client);
        return;
      }

      const wsUrl = `${process.env.REACT_APP_API_BASE_URL}/ws-consultation`;
      console.log('WebSocket 연결 URL:', wsUrl);

      const socket = new SockJS(wsUrl);

      this.client = new Client({
        webSocketFactory: () => socket,
        connectHeaders: {
          Authorization: `Bearer ${token}`,
        },
        debug: (str) => {
          console.log('[WebSocket Debug]', str);
        },
        reconnectDelay: 5000,
        heartbeatIncoming: 4000,
        heartbeatOutgoing: 4000,
      });

      this.client.onConnect = () => {
        console.log('WebSocket이 성공적으로 연결되었습니다.');
        this.connected = true;
        this.reconnectAttempts = 0;
        resolve(this.client);
      };

      this.client.onStompError = (frame) => {
        console.error('WebSocket 오류:', frame.headers['message']);
        reject(new Error(frame.headers['message']));
      };

      this.client.onWebSocketClose = () => {
        console.log('WebSocket 연결이 끊어졌습니다.');
        this.connected = false;
        // 재연결 로직은 유지합니다.
        // this.handleReconnect(token);
      };

      this.client.activate();
    });
  }

  // 💡 2. AuthProvider에서 호출할 수 있도록, 기존 subscribeToPersonalChannel 함수를 대체하는 새 함수를 만들었습니다.
  subscribeToNotifications(onNotificationReceived) {
    if (!this.connected || !this.client) {
      console.error('WebSocket이 연결되지 않아 알림을 구독할 수 없습니다.');
      return;
    }

    // 💡 3. 서버가 메시지를 보내는 정확한 개인 채널 주소입니다.
    const destination = '/user/queue/consultations';

    if (this.subscriptions.has('notifications')) {
      console.warn('이미 알림 채널을 구독 중입니다.');
      return;
    }

    console.log(`알림 채널 구독을 시작합니다: ${destination}`);
    const subscription = this.client.subscribe(destination, (message) => {
      try {
        const notification = JSON.parse(message.body);
        // AuthProvider에서 전달받은 콜백 함수를 실행하여 알림 상태를 업데이트합니다.
        onNotificationReceived(notification);
      } catch (e) {
        console.error('알림 메시지 파싱 오류:', e);
      }
    });

    this.subscriptions.set('notifications', subscription);
  }

  // ... 이하 기존에 사용하시던 다른 메서드들은 그대로 유지하시면 됩니다 ...
  // (subscribeToRoom, unsubscribeFromRoom, sendMessage, isConnected 등)

  // roomUuid 매개변수로 변경 (백엔드가 roomUuid를 기대함)
  subscribeToRoom(roomUuid, callbacks) {
    if (!this.connected) return;
    const destination = `/topic/consultation/${roomUuid}`;
    console.log('[WebSocket] Subscribing to room:', destination);
    if (!this.subscriptions.has(destination)) {
      const sub = this.client.subscribe(destination, (message) => {
        console.log('[WebSocket] Received message:', message.body);
        if (callbacks.onMessage) callbacks.onMessage(JSON.parse(message.body));
      });
      this.subscriptions.set(destination, sub);
    }
  }

  // roomUuid 매개변수로 변경
  unsubscribeFromRoom(roomUuid) {
    const destination = `/topic/consultation/${roomUuid}`;
    const sub = this.subscriptions.get(destination);
    if (sub) {
      sub.unsubscribe();
      this.subscriptions.delete(destination);
    }
  }

  // roomUuid 매개변수로 변경 (백엔드가 roomUuid를 기대함)
  sendMessage(roomUuid, content, messageType = 'TEXT') {
    if (!this.connected || !this.client) {
      console.error('WebSocket not connected');
      return;
    }
    const message = { content, messageType, timestamp: new Date().toISOString() };
    console.log('[WebSocket] Sending message to:', `/app/consultation/${roomUuid}/send`, message);
    this.client.publish({
      destination: `/app/consultation/${roomUuid}/send`,
      body: JSON.stringify(message),
    });
  }

  disconnect() {
    if (this.client) {
      this.client.deactivate();
      this.client = null;
      this.connected = false;
      this.subscriptions.clear();
    }
  }

  isConnected() {
    return this.connected;
  }
}

const websocketService = new WebSocketService();
export default websocketService;
