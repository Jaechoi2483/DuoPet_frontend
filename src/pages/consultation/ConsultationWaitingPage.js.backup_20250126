// src/pages/consultation/ConsultationWaitingPage.js (전체 교체)
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import styles from './ConsultationWaitingPage.module.css';
import { consultationRoomApi } from '../../api/consultationApi';
import Loading from '../../components/common/Loading';

const ConsultationWaitingPage = () => {
  const { roomUuid } = useParams(); // 💡 1. roomId를 roomUuid로 변경
  const navigate = useNavigate();
  const [consultationData, setConsultationData] = useState(null);
  const [timeLeft, setTimeLeft] = useState(30);
  const [status, setStatus] = useState('PENDING');
  const [loading, setLoading] = useState(true);
  const [errorCount, setErrorCount] = useState(0);

  useEffect(() => {
    let timer = null;
    let statusPoller = null;
    let isMounted = true;

    const loadConsultationData = async () => {
      try {
        // 💡 2. roomUuid를 사용하여 API를 호출합니다.
        const response = await consultationRoomApi.getConsultationDetailByUuid(roomUuid);
        if (response.success && isMounted) {
          setConsultationData(response.data);
          if (response.data.roomStatus === 'IN_PROGRESS') {
            navigate(`/consultation/chat/${roomUuid}`);
          }
        }
      } catch (err) {
        console.error('Error loading consultation:', err);
        if (isMounted) {
          setErrorCount((prev) => prev + 1);
        }
      } finally {
        if (isMounted) setLoading(false);
      }
    };

    const checkConsultationStatus = async () => {
      if (status !== 'PENDING' || !isMounted) return;
      try {
        // 💡 3. roomUuid를 사용하여 API를 호출합니다.
        const response = await consultationRoomApi.getConsultationDetailByUuid(roomUuid);
        if (response.success && isMounted) {
          if (response.data.roomStatus === 'IN_PROGRESS') {
            setStatus('APPROVED');
            setTimeout(() => {
              if (isMounted) navigate(`/consultation/chat/${roomUuid}`);
            }, 2000);
          } else if (response.data.roomStatus === 'CANCELLED' || response.data.roomStatus === 'REJECTED') {
            // 💡 4. 서버의 'TIMED_OUT' 상태 대신 'CANCELLED'를 사용합니다.
            setStatus(response.data.roomStatus === 'CANCELLED' ? 'TIMEOUT' : 'REJECTED');
          }
        }
      } catch (err) {
        console.error('Status check error:', err);
        if (isMounted) setErrorCount((prev) => prev + 1);
      }
    };

    loadConsultationData();

    timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          setStatus('TIMEOUT');
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    statusPoller = setInterval(() => {
      if (errorCount < 3 && status === 'PENDING') {
        checkConsultationStatus();
      } else if (errorCount >= 3) {
        clearInterval(statusPoller);
      }
    }, 3000);

    return () => {
      isMounted = false;
      clearInterval(timer);
      clearInterval(statusPoller);
    };
  }, [roomUuid, errorCount, status, navigate]);

  const handleCancel = async () => {
    if (window.confirm('상담 요청을 취소하시겠습니까?')) {
      try {
        // 💡 5. 상담 취소 API는 숫자 roomId를 필요로 합니다.
        await consultationRoomApi.cancelConsultation(consultationData.roomId, '사용자 취소');
        alert('상담 요청이 취소되었습니다.');
        navigate('/health/expert');
      } catch (err) {
        alert('취소 처리 중 오류가 발생했습니다.');
      }
    }
  };

  const handleGoBack = () => navigate('/health/expert');
  if (loading) return <Loading />;

  return (
    <div className={styles.container}>
      {status === 'PENDING' && (
        <div className={styles.waitingCard}>
          <div className={styles.header}>
            <h2 className={styles.title}>전문가 연결 중...</h2>
            <div className={styles.timer}>
              <span className={styles.timeNumber}>{timeLeft}</span>
              <span className={styles.timeUnit}>초</span>
            </div>
          </div>
          
          <div className={styles.content}>
            <div className={styles.animationWrapper}>
              <div className={styles.pulseCircle}></div>
              <div className={styles.iconWrapper}>
                <span className={styles.vetIcon}>🩺</span>
              </div>
            </div>
            
            <p className={styles.message}>
              {consultationData?.vetName ? (
                <>
                  {consultationData.vetName} 전문가의<br />
                  상담 수락을 기다리고 있습니다.
                </>
              ) : (
                <>
                  전문가의 상담 수락을<br />
                  기다리고 있습니다.
                </>
              )}
            </p>
            
            {consultationData && (
              <div className={styles.consultationInfo}>
                <div className={styles.infoItem}>
                  <span className={styles.label}>반려동물:</span>
                  <span className={styles.value}>
                    {consultationData.petName || '정보 없음'}
                  </span>
                </div>
                <div className={styles.infoItem}>
                  <span className={styles.label}>증상:</span>
                  <span className={styles.value}>
                    {consultationData.chiefComplaint || '증상 정보 없음'}
                  </span>
                </div>
              </div>
            )}
          </div>
          
          <div className={styles.actions}>
            <button 
              className={styles.cancelButton}
              onClick={handleCancel}
            >
              상담 취소
            </button>
          </div>
        </div>
      )}
      
      {status === 'APPROVED' && (
        <div className={styles.approvedCard}>
          <div className={styles.successIcon}>✅</div>
          <h2 className={styles.successTitle}>전문가와 연결되었습니다!</h2>
          <p className={styles.successMessage}>
            잠시 후 상담 화면으로 이동합니다...
          </p>
        </div>
      )}
      
      {status === 'TIMEOUT' && (
        <div className={styles.timeoutCard}>
          <div className={styles.failIcon}>⏰</div>
          <h2 className={styles.failTitle}>연결 시간이 초과되었습니다</h2>
          <p className={styles.failMessage}>
            전문가가 30초 내에 응답하지 않았습니다.<br />
            잠시 후 다시 시도해주세요.
          </p>
          <button 
            className={styles.backButton}
            onClick={handleGoBack}
          >
            돌아가기
          </button>
        </div>
      )}
      
      {status === 'REJECTED' && (
        <div className={styles.rejectedCard}>
          <div className={styles.failIcon}>❌</div>
          <h2 className={styles.failTitle}>상담이 거절되었습니다</h2>
          <p className={styles.failMessage}>
            전문가가 상담을 수락하지 않았습니다.<br />
            다른 전문가를 선택해주세요.
          </p>
          <button 
            className={styles.backButton}
            onClick={handleGoBack}
          >
            돌아가기
          </button>
        </div>
      )}
    </div>
  );
};

export default ConsultationWaitingPage;
